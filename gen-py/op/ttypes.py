#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
import sys

from thrift.transport import TTransport


class PokerColor(object):
    diamond = 0
    club = 1
    heart = 2
    spade = 3

    _VALUES_TO_NAMES = {
        0: "diamond",
        1: "club",
        2: "heart",
        3: "spade",
    }

    _NAMES_TO_VALUES = {
        "diamond": 0,
        "club": 1,
        "heart": 2,
        "spade": 3,
    }


class Poker(object):
    """
    Attributes:
     - v
     - t
    """

    thrift_spec = (
        None,  # 0
        (1, TType.BYTE, 'v', None, None, ),  # 1
        (2, TType.I32, 't', None, None, ),  # 2
    )

    def __init__(self, v=None, t=None,):
        self.v = v
        self.t = t

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, (self.__class__, self.thrift_spec))
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.BYTE:
                    self.v = iprot.readByte()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.t = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, (self.__class__, self.thrift_spec)))
            return
        oprot.writeStructBegin('Poker')
        if self.v is not None:
            oprot.writeFieldBegin('v', TType.BYTE, 1)
            oprot.writeByte(self.v)
            oprot.writeFieldEnd()
        if self.t is not None:
            oprot.writeFieldBegin('t', TType.I32, 2)
            oprot.writeI32(self.t)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        if self.v is None:
            raise TProtocolException(message='Required field v is unset!')
        if self.t is None:
            raise TProtocolException(message='Required field t is unset!')
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
